#!/bin/sh

function usage {
        echo "Usage : $0 <Bundle Destination Dir> [<Application Name>=Tulip] [<suffix>]"
}

APP_NAME=Tulip

if [ $# -lt 1 ] || [ $# -gt 3 ]
then
    usage $0
    exit 1
elif [ $# -gt 1 ]
then
    APP_NAME=$2
    if [ $# -eq 3 ]
    then
	SUFFIX=-$3
    fi
fi

TULIP_DIR=@CMAKE_INSTALL_PREFIX@
DEST_DIR=$1
SRC_DIR=@Tulip_SOURCE_DIR@/bundlers/mac
PYTHON_BUILD=@TULIP_PYTHON_BUNDLE@
QT_BINARY_DIR=@QT_BINARY_DIR@
AROBASE=$(printf "\\100")

if [ "${QT_BINARY_DIR}" = "" ]
then
    QT_BINARY_DIR=@_qt5Gui_install_prefix@/bin
fi

if [ ! -d ${TULIP_DIR} ]
then
    echo "Error : the specified Tulip installation directory does not exist"
    exit 1
fi

echo "Wiping previous bundles into ${DEST_DIR}"
rm -rf "${DEST_DIR}/application" 2>/dev/null
rm -f "${DEST_DIR}/${APP_NAME}-@Tulip_VERSION@.dmg" 2>/dev/null

echo 'Creating base directories'
mkdir -p "${DEST_DIR}/application"
cd "${DEST_DIR}/application"
# needed by make_dmg.sh
mkdir .background
cp "${SRC_DIR}/background.png" .background/

mkdir -p Tulip.app/Contents/{MacOS,Resources,Frameworks}
cd Tulip.app/Contents
cp "${SRC_DIR}/tulip.icns" Resources/
sed -e s"/TLP_VERSION/@Tulip_VERSION@/g" -e s"/ARCH/@CMAKE_SYSTEM_PROCESSOR@/" "${SRC_DIR}/Info.plist" > Info.plist

echo 'Copying binaries & libraries'
cd "${DEST_DIR}/application/Tulip.app/Contents/"
cp -r "${TULIP_DIR}"/* .
mv lib/*.dylib Frameworks/
rm -rf include
rm -rf lib/cmake

if [ "$PYTHON_BUILD" != "ON" ]
then
   echo 'Removing Tulip libs linked to Python'
   rm -rf lib/tulip/python lib/tulip/libtulip-python*.dylib
else
    find lib/tulip/python  \( -name '*.pyc' -o -name '*.pyo' \) | xargs rm -rf
 if [ -d @PYTHON_DIR_PATH@ ]
 then
     echo 'Copying Python Framework'
     PYTHON_DIR_PATH=@PYTHON_DIR_PATH@
     if [ -L $PYTHON_DIR_PATH ]; then
         PYTHON_DIR_PATH=$(dirname $PYTHON_DIR_PATH)/$(readlink $PYTHON_DIR_PATH)
     fi
     mkdir -p Frameworks/Python.framework/Versions
     cp -a $PYTHON_DIR_PATH Frameworks/Python.framework/Versions
     # cleanup Python.framework
     find Frameworks/Python.framework \( -name '*.pyc' -o -name '*.pyo' \) | xargs rm -rf
     rm -rf Frameworks/Python.framework/Versions/@PYTHON_VERSION@/bin/sip-*
     rm -rf Frameworks/Python.framework/Versions/@PYTHON_VERSION@/include
     rm -rf Frameworks/Python.framework/Versions/@PYTHON_VERSION@/share
     pushd Frameworks/Python.framework/Versions/@PYTHON_VERSION@/lib/python@PYTHON_VERSION@/site-packages
     find . -mindepth 1 -maxdepth 1 -type d | grep -v pip | xargs rm -rf *.pth *.py
     popd
 fi
fi

echo 'Copying license'
cd "${DEST_DIR}/application"
cp "${SRC_DIR}/../../COPYING.LESSER" .

QT_LIB_DIR="@QT_QTCORE_LIBRARY@/.."
echo 'Copying Resources'
cd "${DEST_DIR}/application/Tulip.app/Contents/Frameworks/"
cp -r "${QT_LIB_DIR}/QtGui.framework/Resources/qt_menu.nib" ../Resources 2>/dev/null
cp "@QT_QTCLUCENE_LIBRARY@" . 2>/dev/null

# use macdeployqt to configure exe & libraries
cd ..
# configure tulip
mv bin/tulip MacOS/Tulip
rm -rf bin

# run macdeployqt with the Tulip Python dynamic modules
# (not processed by macdeployqt as they are suffixed by .so instead of .dylib)
if [ "$PYTHON_BUILD" = "ON" ]
then
TULIP_SO=$(ls ${DEST_DIR}/application/Tulip.app/Contents/lib/tulip/python/tulip/native/_tulip.*so)
SIP_SO=$(ls ${DEST_DIR}/application/Tulip.app/Contents/lib/tulip/python/tulip/native/sip.*so)
TULIPGUI_SO=$(ls ${DEST_DIR}/application/Tulip.app/Contents/lib/tulip/python/tulipgui/native/_tulipgui.*so)
${QT_BINARY_DIR}/macdeployqt ${DEST_DIR}/application/Tulip.app -executable=${TULIP_SO} -executable=${SIP_SO} -executable=${TULIPGUI_SO} -executable=${DEST_DIR}/application/Tulip.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python -executable=${DEST_DIR}/application/Tulip.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Resources/Python.app/Contents/MacOS/Python
# ensure embedded python framework will be found
# when loading all libs related to python
# update tulip python specific libs
echo 'Configuring Tulip python linked libs'
install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}loader_path/../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/libtulip-python-*.dylib
install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/_tulip*.so
install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/sip*.so
install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulipgui/native/_tulipgui*.so

# do the same for the python linked libs in lib/tulip
for DYLIB in $(find ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip -name '*.dylib' -print)
do
  otool -L ${DYLIB} | grep Python
  if [ $? -eq 0 ]
  then
    if [ "$(dirname ${DYLIB})" = "lib/tulip" ]
    then
      install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}loader_path/../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DYLIB}
    else
      install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}loader_path/../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DYLIB}
    fi
  fi
done

# do the same for the python embedded executable, application
# to ensure they can be used safely to install
# the external modules needed by the user
install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}executable_path/../Python ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/bin/python@PYTHON_VERSION@
install_name_tool -change $PYTHON_DIR_PATH/Python ${AROBASE}executable_path/../../../../Python ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Resources/Python.app/Contents/MacOS/Python

# ensure Python.Frameworks lib/*.dylib embedded libs are linked to lib/*.dylib
for DYLIB in $(find ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/lib -name '*.dylib' -a -type f)
do
  for LLIB in $(otool -L $DYLIB | grep Python.framework | cut -d '(' -s -f 1)
  do
    install_name_tool -change $LLIB ${AROBASE}loader_path/$(basename $LLIB) $DYLIB
  done
done

# do the same for pythonX.Y/lib-dynload/*.so
for SOLIB in $(ls ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/lib/python*/lib-dynload/*.so)
do
  for DYLIB in $(otool -L $SOLIB | grep Python.framework | cut -d '(' -s -f 1)
  do
    install_name_tool -change $DYLIB ${AROBASE}loader_path/../../$(basename $DYLIB) $SOLIB
  done
done

else
${QT_BINARY_DIR}/macdeployqt ${DEST_DIR}/application/Tulip.app
fi
# rename
mv ${DEST_DIR}/application/Tulip.app ${DEST_DIR}/application/${APP_NAME}-@Tulip_VERSION@${SUFFIX}.app

# generate dmg
echo 'Generating DMG'
cd "${DEST_DIR}"
sh "${SRC_DIR}/make_dmg.sh" ${APP_NAME} "@Tulip_VERSION@${SUFFIX}" "${DEST_DIR}/application"

# rename dmg if needed
if [ "$PYTHON_BUILD" = "ON" ]
then
  DMG_NAME="${APP_NAME}-@Tulip_VERSION@${SUFFIX}_qt@QT_VERSION@_py@PYTHON_VERSION@.dmg"
else
  DMG_NAME="${APP_NAME}-@Tulip_VERSION@${SUFFIX}_qt@QT_VERSION@_no_python.dmg"
fi
echo "${DMG_NAME} has been correctly generated in ${DEST_DIR}"
mv ${APP_NAME}-@Tulip_VERSION@${SUFFIX}.dmg ${DMG_NAME}
